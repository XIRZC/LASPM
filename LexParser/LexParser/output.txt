预处理后字符串：
 void pre_treatment(char destStr[],char srcStr[],int count); int lex_parse(char srcStr[],List* L); int keys2num(char id[10]); int isOperandsFirst(char ch); int operands2num(char srcStr[],int &i); int bounds2num(char ch); void clearStr(char str[]); void showAll(List* l,FILE *out); char idsTable[90][10]={"#",  "auto","break","case","char","const","continue","default","do", "double","else","enum","extern","float","for","goto","if", "int","long","register","return","short","signed","sizeof","static", "struct","switch","typedef","union","unsigned","void","volatile","while",  "(",")","{","}",",",";","\"","\'",  "++","--","->","[","]", "*","/","%","+","-", "<<",">>","<","<=",">", ">=","==","!=","&","^", "|","&&","||","?:","=", "+=","-=","*=","/=","%=", "&=","^=","|=","<<=",">>=", ".","!",  "ID","NUM","STRING","CHAR","DECIMAL","EXPONET","HEX","OCTAL",":" }; int main() { List *l=(List*)malloc(sizeof(List)); char srcStr[100000],destStr[100000]; int count=0; list_init(l); FILE *fp=fopen("main.cpp","r"); FILE *out=fopen("output.txt","w"); while((srcStr[count]=fgetc(fp))!=EOF) count++; srcStr[count]='\0'; pre_treatment(destStr,srcStr,count); printf("源文件字符串：\n%s",srcStr); printf("预处理后字符串：\n%s\n",destStr); fprintf(out,"预处理后字符串：\n%s\n",destStr); if(!lex_parse(destStr,l)){ printf("程序存在错误！！！\n"); return 0; } else showAll(l,out); return 0; } int lex_parse(char srcStr[],List *l){ char token[TOKENLEGNTH];  int syn=-1;  int i=0;  int count=0;  int flag=0;  clearStr(token); while(srcStr[i]!='\0'){  if(syn==39&&(flag%2==1)){  token[count++]='\"'; while(srcStr[i]!='\"'){ if(srcStr[i]=='\\'){  if(srcStr[i+1]=='\''||srcStr[i+1]=='\"'||srcStr[i+1]=='\\') i++;  token[count++]=srcStr[i++]; } else token[count++]=srcStr[i++]; } token[count++]='\"'; token[count]='\0'; syn=80; } else if(syn==40&&(flag%2==1)){  token[count++]='\''; while(srcStr[i]!='\''){ if(srcStr[i]=='\\'){  if(srcStr[i+1]=='\''||srcStr[i+1]=='\"'||srcStr[i+1]=='\\') i++;  token[count++]=srcStr[i++]; } else token[count++]=srcStr[i++]; } token[count++]='\''; token[count]='\0'; syn=81; } else if(srcStr[i]=='#'){  syn=0; i++; } else if(isalpha(srcStr[i])||srcStr[i]=='_'){  while(isalnum(srcStr[i])||srcStr[i]=='_'){ token[count++]=srcStr[i++]; } token[count]='\0'; syn=keys2num(token);  if(syn==0)  syn=78; } else if(isdigit(srcStr[i])){  if(srcStr[i]=='0'&&isdigit(srcStr[i+1])){  while(isdigit(srcStr[i])){ token[count++]=srcStr[i++]; } syn=85; } else if(srcStr[i]=='0'&&(srcStr[i+1]=='x'||srcStr[i+1]=='X')){  while(isdigit(srcStr[i])||srcStr[i]=='x'||srcStr[i]=='X'){ token[count++]=srcStr[i++]; } syn=84; } else{  syn=79;  while(isdigit(srcStr[i])||srcStr[i]=='.'||srcStr[i]=='e'||srcStr[i]=='E'||srcStr[i]=='+'||srcStr[i]=='-'){ if(srcStr[i]=='.') syn=82;  if(srcStr[i]=='e'||srcStr[i]=='E') syn=83;  token[count++]=srcStr[i++]; } } token[count]='\0'; } else if(isOperandsFirst(srcStr[i])){  syn=operands2num(srcStr,i); } else if(bounds2num(srcStr[i])){  syn=bounds2num(srcStr[i]); if(syn==39||syn==40) { flag++; i++; continue; } i++; } else if(isspace(srcStr[i])){ i++; continue; }  Node* node=(Node *)malloc(sizeof(Node)); node->syn=syn; if(token[0]) strcpy(node->token,token); clearStr(token);  count=0; push_back(node,l); } return 1; } void showAll(List *l,FILE *out){ Node* node=l->head; while(node!=NULL){ if(node->syn>=78&&node->syn<=85){  printf("< %s , %s >\n",idsTable[node->syn],node->token); fprintf(out,"< %s , %s >\n",idsTable[node->syn],node->token); } else{  printf("< %s , - >\n",idsTable[node->syn]); fprintf(out,"< %s , - >\n",idsTable[node->syn]); } node=node->next; } } void clearStr(char str[]){ memset(str,'\0',sizeof(str)); } int bounds2num(char ch){ int syn=0; if(ch=='(') syn=33; else if(ch==')') syn=34; else if(ch=='{') syn=35; else if(ch=='}') syn=36; else if(ch==',') syn=37; else if(ch==';') syn=38; else if(ch=='\"') syn=39; else if(ch=='\'') syn=40; else if(ch==':') syn=86; return syn; } int operands2num(char srcStr[],int &i){ int syn; switch(srcStr[i]){  case '[': syn=44;i++;break; case ']': syn=45;i++;break; case '?': syn=46;i++;break; case '.': syn=76;i++;break;  case '+': if(srcStr[i+1]=='+'){ syn=41; i+=2; } else if(srcStr[i+1]=='='){ syn=66; i+=2; } else{ syn=49; i++; } break; case '-': if(srcStr[i+1]=='-'){ syn=42; i+=2; } else if(srcStr[i+1]=='='){ syn=67; i+=2; } else if(srcStr[i+1]=='>'){ syn=43; i+=2; } else{ syn=50; i++; } break; case '*': if(srcStr[i+1]=='='){ syn=68; i+=2; } else{ syn=46; i++; } break; case '/': if(srcStr[i+1]=='='){ syn=69; i+=2; } else{ syn=47; i++; } break; case '%': if(srcStr[i+1]=='='){ syn=70; i+=2; } else{ syn=48; i++; } break; case '&': if(srcStr[i+1]=='&'){ syn=62; i+=2; } else if(srcStr[i+1]=='='){ syn=71; i+=2; } else{ syn=59; i++; } break; case '|': if(srcStr[i+1]=='|'){ syn=63; i+=2; } else if(srcStr[i+1]=='='){ syn=73; i+=2; } else{ syn=61; i++; } break; case '!': if(srcStr[i+1]=='='){ syn=58; i+=2; } else{ syn=77; i++; } break; case '^': if(srcStr[i+1]=='='){ syn=72; i+=2; } else{ syn=60; i++; } break; case '>': if(srcStr[i+1]=='>'){ if(srcStr[i+2]=='='){ syn=75; i+=3; } else{ syn=52; i+=2; } } else if(srcStr[i+1]=='='){ syn=56; i+=2; } else{ syn=55; i++; } break; case '<': if(srcStr[i+1]=='<'){ if(srcStr[i+2]=='='){ syn=74; i+=3; } else{ syn=51; i+=2; } } else if(srcStr[i+1]=='='){ syn=54; i+=2; } else{ syn=53; i++; } break; case '=': if(srcStr[i+1]=='='){ syn=57; i+=2; } else{ syn=65; i++; } break; default: break; } return syn; } int isOperandsFirst(char ch){ if(ch=='+'||ch=='-'||ch=='['||ch==']'||ch=='*'||ch=='/'|| ch=='%'||ch=='<'||ch=='>'||ch=='&'||ch=='!'||ch=='^'|| ch=='|'||ch=='?' ||ch=='.'||ch=='=') return 1; else return 0; } int keys2num(char id[10]){ for(int i=0;i<KEYSLENGTH;i++){ if(strcmp(id,idsTable[i])==0){ return i;  } } return 0; } void pre_treatment(char destStr[],char srcStr[],int count){ int j=0; int i=0; while(i<count){ if(isspace(srcStr[i])){ while(isspace(srcStr[i])){  i++; } destStr[j++]=' '; } if(srcStr[i]=='/'&&srcStr[i+1]=='/'){  i+=2;  while(srcStr[i]!='\n') i++; i++;  continue;  } if(srcStr[i]=='/'&&srcStr[i+1]=='*'){  i+=2;  while(srcStr[i]!='*'||srcStr[i+1]!='/'){ i++; } i+=2;  continue;  }  if(srcStr[i]=='#'&&(srcStr[i-1]!='\''&&srcStr[i-1]!='\"')){  while(srcStr[i]!='\n') i++; i++; continue; } destStr[j++]=srcStr[i++]; } destStr[j]='\0'; } 
< void , - >
< ID , pre_treatment >
< ( , - >
< char , - >
< ID , destStr >
< [ , - >
< ] , - >
< , , - >
< char , - >
< ID , srcStr >
< [ , - >
< ] , - >
< , , - >
< int , - >
< ID , count >
< ) , - >
< ; , - >
< int , - >
< ID , lex_parse >
< ( , - >
< char , - >
< ID , srcStr >
< [ , - >
< ] , - >
< , , - >
< ID , List >
< * , - >
< ID , L >
< ) , - >
< ; , - >
< int , - >
< ID , keys2num >
< ( , - >
< char , - >
< ID , id >
< [ , - >
< NUM , 10 >
< ] , - >
< ) , - >
< ; , - >
< int , - >
< ID , isOperandsFirst >
< ( , - >
< char , - >
< ID , ch >
< ) , - >
< ; , - >
< int , - >
< ID , operands2num >
< ( , - >
< char , - >
< ID , srcStr >
< [ , - >
< ] , - >
< , , - >
< int , - >
< & , - >
< ID , i >
< ) , - >
< ; , - >
< int , - >
< ID , bounds2num >
< ( , - >
< char , - >
< ID , ch >
< ) , - >
< ; , - >
< void , - >
< ID , clearStr >
< ( , - >
< char , - >
< ID , str >
< [ , - >
< ] , - >
< ) , - >
< ; , - >
< void , - >
< ID , showAll >
< ( , - >
< ID , List >
< * , - >
< ID , l >
< , , - >
< ID , FILE >
< * , - >
< ID , out >
< ) , - >
< ; , - >
< char , - >
< ID , idsTable >
< [ , - >
< NUM , 90 >
< ] , - >
< [ , - >
< NUM , 10 >
< ] , - >
< = , - >
< { , - >
< STRING , "#" >
< , , - >
< STRING , "auto" >
< , , - >
< STRING , "break" >
< , , - >
< STRING , "case" >
< , , - >
< STRING , "char" >
< , , - >
< STRING , "const" >
< , , - >
< STRING , "continue" >
< , , - >
< STRING , "default" >
< , , - >
< STRING , "do" >
< , , - >
< STRING , "double" >
< , , - >
< STRING , "else" >
< , , - >
< STRING , "enum" >
< , , - >
< STRING , "extern" >
< , , - >
< STRING , "float" >
< , , - >
< STRING , "for" >
< , , - >
< STRING , "goto" >
< , , - >
< STRING , "if" >
< , , - >
< STRING , "int" >
< , , - >
< STRING , "long" >
< , , - >
< STRING , "register" >
< , , - >
< STRING , "return" >
< , , - >
< STRING , "short" >
< , , - >
< STRING , "signed" >
< , , - >
< STRING , "sizeof" >
< , , - >
< STRING , "static" >
< , , - >
< STRING , "struct" >
< , , - >
< STRING , "switch" >
< , , - >
< STRING , "typedef" >
< , , - >
< STRING , "union" >
< , , - >
< STRING , "unsigned" >
< , , - >
< STRING , "void" >
< , , - >
< STRING , "volatile" >
< , , - >
< STRING , "while" >
< , , - >
< STRING , "(" >
< , , - >
< STRING , ")" >
< , , - >
< STRING , "{" >
< , , - >
< STRING , "}" >
< , , - >
< STRING , "," >
< , , - >
< STRING , ";" >
< , , - >
< STRING , """ >
< , , - >
< STRING , "'" >
< , , - >
< STRING , "++" >
< , , - >
< STRING , "--" >
< , , - >
< STRING , "->" >
< , , - >
< STRING , "[" >
< , , - >
< STRING , "]" >
< , , - >
< STRING , "*" >
< , , - >
< STRING , "/" >
< , , - >
< STRING , "%" >
< , , - >
< STRING , "+" >
< , , - >
< STRING , "-" >
< , , - >
< STRING , "<<" >
< , , - >
< STRING , ">>" >
< , , - >
< STRING , "<" >
< , , - >
< STRING , "<=" >
< , , - >
< STRING , ">" >
< , , - >
< STRING , ">=" >
< , , - >
< STRING , "==" >
< , , - >
< STRING , "!=" >
< , , - >
< STRING , "&" >
< , , - >
< STRING , "^" >
< , , - >
< STRING , "|" >
< , , - >
< STRING , "&&" >
< , , - >
< STRING , "||" >
< , , - >
< STRING , "?:" >
< , , - >
< STRING , "=" >
< , , - >
< STRING , "+=" >
< , , - >
< STRING , "-=" >
< , , - >
< STRING , "*=" >
< , , - >
< STRING , "/=" >
< , , - >
< STRING , "%=" >
< , , - >
< STRING , "&=" >
< , , - >
< STRING , "^=" >
< , , - >
< STRING , "|=" >
< , , - >
< STRING , "<<=" >
< , , - >
< STRING , ">>=" >
< , , - >
< STRING , "." >
< , , - >
< STRING , "!" >
< , , - >
< STRING , "ID" >
< , , - >
< STRING , "NUM" >
< , , - >
< STRING , "STRING" >
< , , - >
< STRING , "CHAR" >
< , , - >
< STRING , "DECIMAL" >
< , , - >
< STRING , "EXPONET" >
< , , - >
< STRING , "HEX" >
< , , - >
< STRING , "OCTAL" >
< , , - >
< STRING , ":" >
< } , - >
< ; , - >
< int , - >
< ID , main >
< ( , - >
< ) , - >
< { , - >
< ID , List >
< * , - >
< ID , l >
< = , - >
< ( , - >
< ID , List >
< * , - >
< ) , - >
< ID , malloc >
< ( , - >
< sizeof , - >
< ( , - >
< ID , List >
< ) , - >
< ) , - >
< ; , - >
< char , - >
< ID , srcStr >
< [ , - >
< NUM , 100000 >
< ] , - >
< , , - >
< ID , destStr >
< [ , - >
< NUM , 100000 >
< ] , - >
< ; , - >
< int , - >
< ID , count >
< = , - >
< NUM , 0 >
< ; , - >
< ID , list_init >
< ( , - >
< ID , l >
< ) , - >
< ; , - >
< ID , FILE >
< * , - >
< ID , fp >
< = , - >
< ID , fopen >
< ( , - >
< STRING , "main.cpp" >
< , , - >
< STRING , "r" >
< ) , - >
< ; , - >
< ID , FILE >
< * , - >
< ID , out >
< = , - >
< ID , fopen >
< ( , - >
< STRING , "output.txt" >
< , , - >
< STRING , "w" >
< ) , - >
< ; , - >
< while , - >
< ( , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , count >
< ] , - >
< = , - >
< ID , fgetc >
< ( , - >
< ID , fp >
< ) , - >
< ) , - >
< != , - >
< ID , EOF >
< ) , - >
< ID , count >
< ++ , - >
< ; , - >
< ID , srcStr >
< [ , - >
< ID , count >
< ] , - >
< = , - >
< CHAR , '\0' >
< ; , - >
< ID , pre_treatment >
< ( , - >
< ID , destStr >
< , , - >
< ID , srcStr >
< , , - >
< ID , count >
< ) , - >
< ; , - >
< ID , printf >
< ( , - >
< STRING , "源文件字符串：\n%s" >
< , , - >
< ID , srcStr >
< ) , - >
< ; , - >
< ID , printf >
< ( , - >
< STRING , "预处理后字符串：\n%s\n" >
< , , - >
< ID , destStr >
< ) , - >
< ; , - >
< ID , fprintf >
< ( , - >
< ID , out >
< , , - >
< STRING , "预处理后字符串：\n%s\n" >
< , , - >
< ID , destStr >
< ) , - >
< ; , - >
< if , - >
< ( , - >
< ! , - >
< ID , lex_parse >
< ( , - >
< ID , destStr >
< , , - >
< ID , l >
< ) , - >
< ) , - >
< { , - >
< ID , printf >
< ( , - >
< STRING , "程序存在错误！！！\n" >
< ) , - >
< ; , - >
< return , - >
< NUM , 0 >
< ; , - >
< } , - >
< else , - >
< ID , showAll >
< ( , - >
< ID , l >
< , , - >
< ID , out >
< ) , - >
< ; , - >
< return , - >
< NUM , 0 >
< ; , - >
< } , - >
< int , - >
< ID , lex_parse >
< ( , - >
< char , - >
< ID , srcStr >
< [ , - >
< ] , - >
< , , - >
< ID , List >
< * , - >
< ID , l >
< ) , - >
< { , - >
< char , - >
< ID , token >
< [ , - >
< ID , TOKENLEGNTH >
< ] , - >
< ; , - >
< int , - >
< ID , syn >
< = , - >
< - , - >
< NUM , 1 >
< ; , - >
< int , - >
< ID , i >
< = , - >
< NUM , 0 >
< ; , - >
< int , - >
< ID , count >
< = , - >
< NUM , 0 >
< ; , - >
< int , - >
< ID , flag >
< = , - >
< NUM , 0 >
< ; , - >
< ID , clearStr >
< ( , - >
< ID , token >
< ) , - >
< ; , - >
< while , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< != , - >
< CHAR , '\0' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , syn >
< == , - >
< NUM , 39 >
< && , - >
< ( , - >
< ID , flag >
< % , - >
< NUM , 2 >
< == , - >
< NUM , 1 >
< ) , - >
< ) , - >
< { , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< CHAR , '"' >
< ; , - >
< while , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< != , - >
< CHAR , '"' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '\' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , ''' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '"' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '\' >
< ) , - >
< ID , i >
< ++ , - >
< ; , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< else , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< CHAR , '"' >
< ; , - >
< ID , token >
< [ , - >
< ID , count >
< ] , - >
< = , - >
< CHAR , '\0' >
< ; , - >
< ID , syn >
< = , - >
< NUM , 80 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , syn >
< == , - >
< NUM , 40 >
< && , - >
< ( , - >
< ID , flag >
< % , - >
< NUM , 2 >
< == , - >
< NUM , 1 >
< ) , - >
< ) , - >
< { , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< CHAR , ''' >
< ; , - >
< while , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< != , - >
< CHAR , ''' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '\' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , ''' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '"' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '\' >
< ) , - >
< ID , i >
< ++ , - >
< ; , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< else , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< CHAR , ''' >
< ; , - >
< ID , token >
< [ , - >
< ID , count >
< ] , - >
< = , - >
< CHAR , '\0' >
< ; , - >
< ID , syn >
< = , - >
< NUM , 81 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '#' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 0 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , isalpha >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '_' >
< ) , - >
< { , - >
< while , - >
< ( , - >
< ID , isalnum >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '_' >
< ) , - >
< { , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< ID , token >
< [ , - >
< ID , count >
< ] , - >
< = , - >
< CHAR , '\0' >
< ; , - >
< ID , syn >
< = , - >
< ID , keys2num >
< ( , - >
< ID , token >
< ) , - >
< ; , - >
< if , - >
< ( , - >
< ID , syn >
< == , - >
< NUM , 0 >
< ) , - >
< ID , syn >
< = , - >
< NUM , 78 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , isdigit >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '0' >
< && , - >
< ID , isdigit >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< while , - >
< ( , - >
< ID , isdigit >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< ID , syn >
< = , - >
< NUM , 85 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '0' >
< && , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , 'x' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , 'X' >
< ) , - >
< ) , - >
< { , - >
< while , - >
< ( , - >
< ID , isdigit >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , 'x' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , 'X' >
< ) , - >
< { , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< ID , syn >
< = , - >
< NUM , 84 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 79 >
< ; , - >
< while , - >
< ( , - >
< ID , isdigit >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '.' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , 'e' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , 'E' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '+' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '-' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '.' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 82 >
< ; , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , 'e' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , 'E' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 83 >
< ; , - >
< ID , token >
< [ , - >
< ID , count >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< } , - >
< ID , token >
< [ , - >
< ID , count >
< ] , - >
< = , - >
< CHAR , '\0' >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , isOperandsFirst >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< ID , operands2num >
< ( , - >
< ID , srcStr >
< , , - >
< ID , i >
< ) , - >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , bounds2num >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< ID , bounds2num >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ; , - >
< if , - >
< ( , - >
< ID , syn >
< == , - >
< NUM , 39 >
< || , - >
< ID , syn >
< == , - >
< NUM , 40 >
< ) , - >
< { , - >
< ID , flag >
< ++ , - >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< continue , - >
< ; , - >
< } , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , isspace >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ID , i >
< ++ , - >
< ; , - >
< continue , - >
< ; , - >
< } , - >
< ID , Node >
< * , - >
< ID , node >
< = , - >
< ( , - >
< ID , Node >
< * , - >
< ) , - >
< ID , malloc >
< ( , - >
< sizeof , - >
< ( , - >
< ID , Node >
< ) , - >
< ) , - >
< ; , - >
< ID , node >
< -> , - >
< ID , syn >
< = , - >
< ID , syn >
< ; , - >
< if , - >
< ( , - >
< ID , token >
< [ , - >
< NUM , 0 >
< ] , - >
< ) , - >
< ID , strcpy >
< ( , - >
< ID , node >
< -> , - >
< ID , token >
< , , - >
< ID , token >
< ) , - >
< ; , - >
< ID , clearStr >
< ( , - >
< ID , token >
< ) , - >
< ; , - >
< ID , count >
< = , - >
< NUM , 0 >
< ; , - >
< ID , push_back >
< ( , - >
< ID , node >
< , , - >
< ID , l >
< ) , - >
< ; , - >
< } , - >
< return , - >
< NUM , 1 >
< ; , - >
< } , - >
< void , - >
< ID , showAll >
< ( , - >
< ID , List >
< * , - >
< ID , l >
< , , - >
< ID , FILE >
< * , - >
< ID , out >
< ) , - >
< { , - >
< ID , Node >
< * , - >
< ID , node >
< = , - >
< ID , l >
< -> , - >
< ID , head >
< ; , - >
< while , - >
< ( , - >
< ID , node >
< != , - >
< ID , NULL >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , node >
< -> , - >
< ID , syn >
< >= , - >
< NUM , 78 >
< && , - >
< ID , node >
< -> , - >
< ID , syn >
< <= , - >
< NUM , 85 >
< ) , - >
< { , - >
< ID , printf >
< ( , - >
< STRING , "< %s , %s >\n" >
< , , - >
< ID , idsTable >
< [ , - >
< ID , node >
< -> , - >
< ID , syn >
< ] , - >
< , , - >
< ID , node >
< -> , - >
< ID , token >
< ) , - >
< ; , - >
< ID , fprintf >
< ( , - >
< ID , out >
< , , - >
< STRING , "< %s , %s >\n" >
< , , - >
< ID , idsTable >
< [ , - >
< ID , node >
< -> , - >
< ID , syn >
< ] , - >
< , , - >
< ID , node >
< -> , - >
< ID , token >
< ) , - >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , printf >
< ( , - >
< STRING , "< %s , - >\n" >
< , , - >
< ID , idsTable >
< [ , - >
< ID , node >
< -> , - >
< ID , syn >
< ] , - >
< ) , - >
< ; , - >
< ID , fprintf >
< ( , - >
< ID , out >
< , , - >
< STRING , "< %s , - >\n" >
< , , - >
< ID , idsTable >
< [ , - >
< ID , node >
< -> , - >
< ID , syn >
< ] , - >
< ) , - >
< ; , - >
< } , - >
< ID , node >
< = , - >
< ID , node >
< -> , - >
< ID , next >
< ; , - >
< } , - >
< } , - >
< void , - >
< ID , clearStr >
< ( , - >
< char , - >
< ID , str >
< [ , - >
< ] , - >
< ) , - >
< { , - >
< ID , memset >
< ( , - >
< ID , str >
< , , - >
< CHAR , '\0' >
< , , - >
< sizeof , - >
< ( , - >
< ID , str >
< ) , - >
< ) , - >
< ; , - >
< } , - >
< int , - >
< ID , bounds2num >
< ( , - >
< char , - >
< ID , ch >
< ) , - >
< { , - >
< int , - >
< ID , syn >
< = , - >
< NUM , 0 >
< ; , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , '(' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 33 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , ')' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 34 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , '{' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 35 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , '}' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 36 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , ',' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 37 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , ';' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 38 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , '"' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 39 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , ''' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 40 >
< ; , - >
< else , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , ':' >
< ) , - >
< ID , syn >
< = , - >
< NUM , 86 >
< ; , - >
< return , - >
< ID , syn >
< ; , - >
< } , - >
< int , - >
< ID , operands2num >
< ( , - >
< char , - >
< ID , srcStr >
< [ , - >
< ] , - >
< , , - >
< int , - >
< & , - >
< ID , i >
< ) , - >
< { , - >
< int , - >
< ID , syn >
< ; , - >
< switch , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< { , - >
< case , - >
< CHAR , '[' >
< : , - >
< ID , syn >
< = , - >
< NUM , 44 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< break , - >
< ; , - >
< case , - >
< CHAR , ']' >
< : , - >
< ID , syn >
< = , - >
< NUM , 45 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '?' >
< : , - >
< ID , syn >
< = , - >
< NUM , 46 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '.' >
< : , - >
< ID , syn >
< = , - >
< NUM , 76 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '+' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '+' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 41 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 66 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 49 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '-' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '-' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 42 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 67 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '>' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 43 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 50 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '*' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 68 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 46 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '/' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 69 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 47 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '%' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 70 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 48 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '&' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '&' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 62 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 71 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 59 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '|' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '|' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 63 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 73 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 61 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '!' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 58 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 77 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '^' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 72 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 60 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '>' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '>' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 2 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 75 >
< ; , - >
< ID , i >
< += , - >
< NUM , 3 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 52 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 56 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 55 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '<' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '<' >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 2 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 74 >
< ; , - >
< ID , i >
< += , - >
< NUM , 3 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 51 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< } , - >
< else , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 54 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 53 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< case , - >
< CHAR , '=' >
< : , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '=' >
< ) , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 57 >
< ; , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< } , - >
< else , - >
< { , - >
< ID , syn >
< = , - >
< NUM , 65 >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< break , - >
< ; , - >
< default , - >
< : , - >
< break , - >
< ; , - >
< } , - >
< return , - >
< ID , syn >
< ; , - >
< } , - >
< int , - >
< ID , isOperandsFirst >
< ( , - >
< char , - >
< ID , ch >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , ch >
< == , - >
< CHAR , '+' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '-' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '[' >
< || , - >
< ID , ch >
< == , - >
< CHAR , ']' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '*' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '/' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '%' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '<' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '>' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '&' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '!' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '^' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '|' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '?' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '.' >
< || , - >
< ID , ch >
< == , - >
< CHAR , '=' >
< ) , - >
< return , - >
< NUM , 1 >
< ; , - >
< else , - >
< return , - >
< NUM , 0 >
< ; , - >
< } , - >
< int , - >
< ID , keys2num >
< ( , - >
< char , - >
< ID , id >
< [ , - >
< NUM , 10 >
< ] , - >
< ) , - >
< { , - >
< for , - >
< ( , - >
< int , - >
< ID , i >
< = , - >
< NUM , 0 >
< ; , - >
< ID , i >
< < , - >
< ID , KEYSLENGTH >
< ; , - >
< ID , i >
< ++ , - >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , strcmp >
< ( , - >
< ID , id >
< , , - >
< ID , idsTable >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< == , - >
< NUM , 0 >
< ) , - >
< { , - >
< return , - >
< ID , i >
< ; , - >
< } , - >
< } , - >
< return , - >
< NUM , 0 >
< ; , - >
< } , - >
< void , - >
< ID , pre_treatment >
< ( , - >
< char , - >
< ID , destStr >
< [ , - >
< ] , - >
< , , - >
< char , - >
< ID , srcStr >
< [ , - >
< ] , - >
< , , - >
< int , - >
< ID , count >
< ) , - >
< { , - >
< int , - >
< ID , j >
< = , - >
< NUM , 0 >
< ; , - >
< int , - >
< ID , i >
< = , - >
< NUM , 0 >
< ; , - >
< while , - >
< ( , - >
< ID , i >
< < , - >
< ID , count >
< ) , - >
< { , - >
< if , - >
< ( , - >
< ID , isspace >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< while , - >
< ( , - >
< ID , isspace >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< ID , destStr >
< [ , - >
< ID , j >
< ++ , - >
< ] , - >
< = , - >
< CHAR , ' ' >
< ; , - >
< } , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '/' >
< && , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '/' >
< ) , - >
< { , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< while , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< != , - >
< CHAR , '\n' >
< ) , - >
< ID , i >
< ++ , - >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< continue , - >
< ; , - >
< } , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '/' >
< && , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< == , - >
< CHAR , '*' >
< ) , - >
< { , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< while , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< != , - >
< CHAR , '*' >
< || , - >
< ID , srcStr >
< [ , - >
< ID , i >
< + , - >
< NUM , 1 >
< ] , - >
< != , - >
< CHAR , '/' >
< ) , - >
< { , - >
< ID , i >
< ++ , - >
< ; , - >
< } , - >
< ID , i >
< += , - >
< NUM , 2 >
< ; , - >
< continue , - >
< ; , - >
< } , - >
< if , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< == , - >
< CHAR , '#' >
< && , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< - , - >
< NUM , 1 >
< ] , - >
< != , - >
< CHAR , ''' >
< && , - >
< ID , srcStr >
< [ , - >
< ID , i >
< - , - >
< NUM , 1 >
< ] , - >
< != , - >
< CHAR , '"' >
< ) , - >
< ) , - >
< { , - >
< while , - >
< ( , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ] , - >
< != , - >
< CHAR , '\n' >
< ) , - >
< ID , i >
< ++ , - >
< ; , - >
< ID , i >
< ++ , - >
< ; , - >
< continue , - >
< ; , - >
< } , - >
< ID , destStr >
< [ , - >
< ID , j >
< ++ , - >
< ] , - >
< = , - >
< ID , srcStr >
< [ , - >
< ID , i >
< ++ , - >
< ] , - >
< ; , - >
< } , - >
< ID , destStr >
< [ , - >
< ID , j >
< ] , - >
< = , - >
< CHAR , '\0' >
< ; , - >
< } , - >
